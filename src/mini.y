/* The first section of a bison file contains:
 *    1. A code section for includes and other arbitrary C code. Copied to the parser verbatim
 *    2. Definition of the yylval union
 *    3. Definition of the tokens
 *    4. Precedence directives
 *    5. The start token
 *    6. Parser options
 */

/* Code section */
%{
#include <stdio.h>
#include <stdlib.h>

  // Reference to the line number generated by the scanner
  extern int yylineno;
  // global g_tokens, tells scanner whether to emit (print) token info to stdout
  int g_tokens;
  // Reference to the yylex function to quiet a compiler warning
  int yylex();

  // The yyerror function is called on any syntax error. When using %error-verbose, this function
  // takes a single argument (a string) which contains a detailed explanation of the error.
  // Otherwise it takes no arguments and it is up to the user to format the error using a minimal
  // description provided in yytext.
  void yyerror(const char *s) {
    fprintf(stderr, "Error: (line %d) %s\n", yylineno, s);
    exit(1);
  }
  %}

/* The union directive defines the yylval union used for associating (a) terminals (tokens)
 * returned by flex with additional scanning data (such as identifier/constant values); and
 * optionally (b) non-terminals (variables in productions) with AST information if any.
 */
%union {
  int intval;
  float floatval;
  char *stringval;
  char *identifier;
}

/* Token directives define the token types to be returned by the scanner (excluding character
 * tokens). Each token definition takes [optionally, a reference to the associated field in the
 * yylval union] and an identifier. Multiple tokens can eb defined per directive by using a list
 * of identifiers separated by spaces.
 */
%token <intval> tINTVAL
%token <floatval> tFLOATVAL
%token <stringval> tSTRINGVAL
%token <identifier> tIDENTIFIER

%token tTRUE tFALSE;
%token tINT tFLOAT tBOOLEAN tSTRING;
%token tREAD tPRINT;
%token tVAR;

%token tWHILE tIF tELSE;

%token tCOLON tSEMICOLON
%token tPLUS tMINUS tMULT tDIV;
%token tASSIGN
%token tLPAR tRPAR tLBRACE tRBRACE
%token tEQUALS tNOTEQUALS tAND tOR

/* Precedence directives resolve grammar ambiguities by breaking ties between shift/reduce
 * operations. Tokens are grouped into precendence levels, with lower precedence coming first
 * and then higher precedence in later directives. Tokens specified in the same directive have
 * the same precedence. Ties at the same level are broken using either %left or %right, which
 * denote left-associative and right-associative respectively.
 */
%left tPLUS tMINUS
%left tMULT tDIV

 /* Start token (by default if this is missing it takes the first production */
%start program

 /* Generate the yylloc structure used for storing line numbers with tokens */
%locations
 /* Generate detailed error messages */
%error-verbose

 /* The second section of a bison file contains the productions. Note that rules with the
  * same LHS may be joined together and separated with a pipe.
  */
%%

program:
| declarations statements {}
;

declarations:
| declaration declarations {}
;

declaration:
tVAR tIDENTIFIER tCOLON type tASSIGN expression tSEMICOLON {}
;

statements:
| statement statements {}
;

statement:
expression tSEMICOLON {}
| tIDENTIFIER tASSIGN expression tSEMICOLON {}
| tIF expression tLBRACE statements tRBRACE {}
| tIF expression tLBRACE statements tRBRACE tELSE tLBRACE statements tRBRACE {}
| tWHILE expression tLBRACE statements tRBRACE {}
| tPRINT expression tSEMICOLON {}
| tREAD tIDENTIFIER tSEMICOLON {}
;

expression :
expression tPLUS term {}
| expression tMINUS term {}
| tMINUS term {}
| expression tEQUALS term {}
| expression tNOTEQUALS term {}
| expression tAND term {}
| expression tOR term {}
| term {}
;

term :
term tMULT factor { }
| term tDIV factor { }
| factor {}
;

factor :
tLPAR expression tRPAR {}
| tIDENTIFIER {  }
| tINTVAL     {  }
| tFLOATVAL     {  }
| tSTRINGVAL     {  }
| tTRUE {}
| tFALSE {}
;

type:
tFLOAT
| tINT
| tSTRING
| tBOOLEAN
;

%%
